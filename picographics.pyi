# Python stub to help IDE's with autocomplete
from typing import Any, Tuple, Optional, List, Callable
class PicoGraphics:
    # Enums
    class Display:
        LCD_240X240: int
        ROUND_LCD_240X240: int
        PICO_DISPLAY: int
        PICO_DISPLAY_2: int
        PICO_EXPLORER: int
        TUFTY_2040: int
        ENVIRO_PLUS: int
        LCD_160X80: int
        I2C_OLED_128X128: int
        INKY_PACK: int
        INKY_FRAME: int
        INKY_FRAME_4: int
        GALACTIC_UNICORN: int
        GFX_PACK: int
        INTERSTATE75_32X32: int
        INTERSTATE75_64X32: int
        INTERSTATE75_96X32: int
        INTERSTATE75_96X48: int
        INTERSTATE75_128X32: int
        INTERSTATE75_64X64: int
        INTERSTATE75_128X64: int
        INTERSTATE75_192X64: int
        INTERSTATE75_256X64: int
        INKY_FRAME_7: int
        COSMIC_UNICORN: int
        STELLAR_UNICORN: int
        UNICORN_PACK: int
        SCROLL_PACK: int
        PICO_W_EXPLORER: int
        EXPLORER: int

    class PenType:
        PEN_1BIT: int
        PEN_3BIT: int
        PEN_P2: int
        PEN_P4: int
        PEN_P8: int
        PEN_RGB332: int
        PEN_RGB565: int
        PEN_RGB888: int
        PEN_INKY7: int

    class BusType:
        BUS_I2C: int
        BUS_SPI: int
        BUS_PARALLEL: int
        BUS_PIO: int

    # Module functions
    @staticmethod
    def RGB_to_RGB332(r: int, g: int, b: int) -> int: ...
    @staticmethod
    def RGB_to_RGB565(r: int, g: int, b: int) -> int: ...
    @staticmethod
    def RGB332_to_RGB(rgb332: int) -> Tuple[int, int, int]: ...
    @staticmethod
    def RGB565_to_RGB(rgb565: int) -> Tuple[int, int, int]: ...
    @staticmethod
    def get_required_buffer_size(display: int, pen_type: int) -> int: ...

    # Class methods
    def __init__(self, display: int, pen_type: int, *args, **kwargs) -> None: ...
    def update(self) -> None: ...
    def partial_update(self, x: int, y: int, w: int, h: int) -> None: ...
    def set_backlight(self, brightness: int) -> None: ...
    def set_update_speed(self, update_speed: int) -> None: ...

    # Palette management
    def update_pen(self, pen: int, r: int, g: int, b: int) -> None: ...
    def reset_pen(self, pen: int) -> None: ...
    def set_palette(self, palette: List[Tuple[int, int, int]]) -> None: ...
    @staticmethod
    def hsv_to_rgb(h: float, s: float, v: float) -> Tuple[int, int, int]: ...

    # Pen
    def set_pen(self, pen: int) -> None: ...
    def create_pen(self, r: int, g: int, b: int) -> int: ...
    def create_pen_hsv(self, h: float, s: float, v: float) -> int: ...
    def set_thickness(self, thickness: int) -> None: ...

    # Primitives
    def set_clip(self, x: int, y: int, w: int, h: int) -> None: ...
    def remove_clip(self) -> None: ...
    def clear(self) -> None: ...
    def pixel(self, x: int, y: int) -> None: ...
    def pixel_span(self, x: int, y: int, length: int) -> None: ...
    def rectangle(self, x: int, y: int, w: int, h: int) -> None: ...
    def circle(self, x: int, y: int, r: int) -> None: ...
    def character(self, x: int, y: int, char: str, scale: int = 1, angle: int = 0) -> None: ...
    def text(self, text: str, x: int, y: int, wrap: int = 0, scale: int = 1, angle: int = 0) -> None: ...
    def measure_text(self, text: str, scale: int = 1) -> Tuple[int, int]: ...
    def polygon(self, points: List[Tuple[int, int]]) -> None: ...
    def triangle(self, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> None: ...
    def line(self, x1: int, y1: int, x2: int, y2: int) -> None: ...

    # Sprites
    def set_spritesheet(self, spritedata: Any) -> None: ...
    def load_spritesheet(self, filename: str) -> None: ...
    def sprite(self, x: int, y: int, sprite_index: int, scale: int = 1, angle: int = 0) -> None: ...

    # Utility
    def set_font(self, font: str) -> None: ...
    def get_bounds(self) -> Tuple[int, int]: ...
    def set_framebuffer(self, framebuffer: Any) -> None: ...
    def get_framebuffer(self) -> Any: ...

    def __del__(self) -> None: ...