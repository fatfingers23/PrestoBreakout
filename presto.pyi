import asyncio
from collections import namedtuple
from typing import Any, Optional, Tuple
from picographics import PicoGraphics

Touch = namedtuple("Touch", ("x", "y", "touched"))

class Buzzer:
    def __init__(self, pin: int) -> None: ...
    def set_tone(self, freq: float, duty: float = 0.5) -> bool: ...

class Presto:
    NUM_LEDS: int = 7
    LED_PIN: int = 33

    display: PicoGraphics = ...


    def __init__(
        self,
        full_res: bool = False,
        palette: bool = False,
        ambient_light: bool = False,
        direct_to_fb: bool = False,
        layers: Optional[int] = None,
    ) -> None: ...

    @property
    def touch_a(self) -> Touch: ...
    @property
    def touch_b(self) -> Touch: ...
    @property
    def touch_delta(self) -> Tuple[float, float]: ...

    async def async_connect(self) -> None: ...
    def set_backlight(self, brightness: float) -> None: ...
    def auto_ambient_leds(self, enable: bool) -> None: ...
    def connect(self, ssid: Optional[str] = None, password: Optional[str] = None) -> Any: ...
    def touch_poll(self) -> None: ...
    def update(self) -> None: ...
    def partial_update(self, x: int, y: int, w: int, h: int) -> None: ...
    def clear(self) -> None: ...